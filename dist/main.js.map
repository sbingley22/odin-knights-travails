{"version":3,"file":"main.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;;AAEA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,oBAAoB;AACxC,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,OAAO;AACzB;;AAEA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,OAAO;AACzB,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,WAAW;AACX;;;AAGA;AACA","sources":["webpack://odin-knights-travails/./src/index.js"],"sourcesContent":["class Node {\n  constructor(input, value) {\n    this.input = input;\n    this.value = value;\n  }\n}\n\nclass Chess {\n  constructor() {\n    const rows = 8;\n    const columns = 8;\n    this.board = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      this.board[i] = new Array(columns);\n\n      for (let j = 0; j < columns; j++) {\n        this.board[i][j] = null;\n      }\n    }\n  }\n\n  resetBoard(){\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        this.board[i][j] = null;\n      }\n    }\n  }\n\n  knightMoves(start, end) {\n    this.board[start[0]][start[1]] = new Node([-1, -1, start[0], start[1]]);\n    const path = this.moveRec(this.getLegalMoves(start), end);\n    this.resetBoard()\n    console.log(path);\n    return path\n  }\n\n  moveRec(positions, target) {\n    if (positions.length === 0) {\n      console.log(\"no length\");\n      return null;\n    }\n\n    const thisPos = positions.shift();\n    const x = thisPos[0];\n    const y = thisPos[1];\n    const inx = thisPos[2];\n    const iny = thisPos[3];\n\n    if (this.board[x][y] == null) {\n      this.board[x][y] = new Node([inx, iny], [x, y]);\n      if (x == target[0] && y == target[1]) {\n        const path = this.findPath(x, y);\n        return path\n      }\n    }\n\n    const nextMoves = this.getLegalMoves([x, y]);\n    const nextPositions = [...positions, ...nextMoves];\n    const path = this.moveRec(nextPositions, target);\n    if (path) {\n      return path;\n    }\n    return null;\n  }\n\n  findPath(x, y) {\n    const path = [];\n    path.push([x, y]);\n\n    let input = this.board[x][y].input;\n    while (input[0] != -1) {\n      path.push([input[0], input[1]]);\n      input = this.board[input[0]][input[1]].input;\n    }\n\n    return path;\n  }\n\n  getLegalMoves(pos) {\n    const moves = [];\n    const x = pos[0];\n    const y = pos[1];\n\n    let mx = x - 1;\n    let my = y - 2;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n    \n    mx = x + 1;\n    my = y - 2;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n    \n    mx = x - 2;\n    my = y - 1;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n\n    mx = x - 2;\n    my = y + 1;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n\n    mx = x - 1;\n    my = y + 2;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n\n    mx = x + 1;\n    my = y + 2;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n    \n    mx = x + 2;\n    my = y + 1;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n\n    mx = x + 2;\n    my = y - 1;\n    if (this.isLegal(mx, my)) moves.push([mx, my, x, y]);\n\n    return moves;\n  }\n\n  isLegal(x, y) {\n    if (x >= 8 || x < 0) return false;\n    if (y >= 8 || y < 0) return false;\n    return true;\n  }\n}\n\nconst chess = new Chess();\nlet startSquare = [-1,-1]\n\nconst elements = () => {\n  const content = document.querySelector(\"#content\");\n  const board = document.querySelector(\"#board\");\n  const squares = [];\n\n  const colorSquare = (pos, color) => {\n    squares[pos[0]][pos[1]].classList.add(color)\n  }\n\n  const removeSquareColors = () => {\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[0].length; j++) {\n        squares[i][j].classList.remove(\"red\")\n        squares[i][j].classList.remove(\"yellow\")\n        squares[i][j].classList.remove(\"green\")\n      }      \n    }\n  }\n\n  let black = false;\n  for (let i = 0; i < 8; i++) {\n    const temp = [];\n\n    if (black) black = false;\n    else black = true;\n\n    for (let j = 0; j < 8; j++) {\n      const div = document.createElement(\"div\");\n      div.id = \"s\" + i + j;\n      div.classList.add(\"squares\");\n\n      if (black) {\n        black = false;\n        div.classList.add(\"black\");\n      } else black = true;\n\n      temp.push(div);\n      board.appendChild(div);\n    }\n    squares.push(temp);\n  }\n\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      squares[i][j].addEventListener(\"click\", () => {\n        if (startSquare[0] == -1){\n          removeSquareColors()\n          startSquare = [i,j]\n          colorSquare(startSquare, \"red\")\n        }\n        else {\n          const moves = chess.knightMoves(startSquare, [i, j]);\n          colorSquare([i,j], \"green\")\n          for (let i = 1; i < moves.length -1; i++) {\n            const element = moves[i];\n            colorSquare(element, \"yellow\")\n          }\n          startSquare = [-1,-1]\n        }\n      });\n    }\n  }\n\n  return { content, board, squares };\n};\n\n\nconst el = elements();\n//chess.knightMoves([0, 0], [3, 3]);\n"],"names":[],"sourceRoot":""}